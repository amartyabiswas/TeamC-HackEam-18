let express = require('express');let router = express.Router();let { hash, compare }= require('./hashing.js');let bodyParser=require('body-parser');let strategy = require('passport-local').Strategy;let passport=require('passport');let SuperAdmin=require('../models/SuperAdmin');let Admin=require('../models/Admin');let multer=require('multer');let Member=require('../models/Members');let admission=require('../models/Admission');let mongoose=require('mongoose');let search=require('./filter');const path = require('path');//Connecting to the database....mongoose.connect(process.env.MONGODB_URI||'mongodb://localhost/yoyo');//=====================Passport usage (For Super-Admin)=========================router.use(require('express-session')({    secret: "Keyboard cat",    resave: true,    saveUninitialized: true}));router.use(passport.initialize());router.use(passport.session());//Function to check if the user is logged in or not?? It's a middleware...let superIn=function(req, res, next) {    if(req.user){      if(req.user.super)        next();      else        res.redirect('/');    }    else        res.redirect('/');};let adminIn=function(req, res, next) { if(req.user){      if(!req.user.super)        next();      else        res.redirect('/');    }    else        res.redirect('/');   };let memberIn=function(req, res, next) {    if(req.user){      if(req.user.member)        next();      else        res.redirect('/');    }    else        res.redirect('/');};let notloggedin = function(req,res,next){    if(req.user)        res.redirect('/');    else        next();};let isLoggedIn = function(req,res,next){    if(req.isAuthenticated()){        return next();    }    res.redirect('/');};let middleregister= function(req,res,next){    hash(req.body.password,function(err,hash){        if(err)            res.redirect('../public/index.html');        else{            req.body.password= hash;            next();        }    });};let finduser= function(username,callback){    SuperAdmin.findOne({username:username},callback);};let findMember= function(username,callback){    Member.findOne({username:username},callback);};let findAdmin= function(username,callback){    Admin.findOne({username:username},callback);};passport.use('superAdmin',new strategy(function(username,password, done ) {    finduser(username,function(err,user){        if(err)            console.log(err);        if(!user)            return done(err,false);        compare(password,user.password,function(err,match){            if(err)                throw err;            if(match)                return done(null,user);            else                return done(null,false);        });    });}));passport.serializeUser(function(user,done){    let obj={};    obj.username=user.username;    if(user.member){        obj.member=true;        done(null,obj);    }else{        obj.member=false;        if(user.super){            obj.super=true;        }else{            obj.super=false;        }        done(null, obj);    }});passport.deserializeUser(function(obj,done){    let username=obj.username;   if(obj.member){        findMember(username,function(err,user){            done(err,user);        });   }else{    if(obj.super){            finduser(username,function(err,user){                done(err,user);        });        }else{            findAdmin(username,function(err,user){                done(err,user);        });        }   }});router.post('/signup',middleregister, function(req,res){    SuperAdmin.find({}, function (err, data) {        console.log(data);        if(data.length!==0){            res.redirect('/temp');        }else{            let obj={                username:req.body.username,                password:req.body.password            };            let newUser=new SuperAdmin(obj);            newUser.save(obj);            res.sendFile(path.join(__dirname,'../public/SuperAdminLogin.html'));        }    });});router.get('/temp', function (req, res) {    res.send('We already have a super admin and you are not him...');});//Main logic area...router.post('/login',passport.authenticate('superAdmin',{failureRedirect:'/temp'}), function(req,res){    SuperAdmin.findOne({username:req.body.username}, function (err, data) {        if(err){            console.log(err);        }else{            res.sendFile(path.join(__dirname,'../public/SuperAdmin.html'));        }    });});router.get('/logout',isLoggedIn, function (req, res) {    req.logout();    res.redirect('/');});//===========================Passport usage (For Admin)==================================router.get('/msg', function (req, res) {   res.send("Username has Already been taken or You are currently not an Admin... :D");});router.post('/admin',middleregister, function(req,res){    Admin.findOne({username: req.body.username}, function (err, data) {        console.log(data);        if(data!==null){            res.redirect('/msg');        }else{            let obj={                username:req.body.username,                password:req.body.password            };            let newUser=new Admin(obj);            newUser.save(obj);            res.sendFile(path.join(__dirname,'../public/AdminLogin.html'));        }    });});passport.use('Admin',new strategy(function(username,password, done ) {    findAdmin(username,function(err,user){        if(err)            console.log(err);        if(!user)            return done(err,false);        compare(password,user.password,function(err,match){            if(err)                throw err;            if(match)                return done(null,user);            else                return done(null,false);        });    });}));router.post('/adminLogin',passport.authenticate('Admin',{failureRedirect:'/msg'}), function(req,res){    Admin.findOne({username:req.body.username}, function (err, data) {        if(err){            console.log(err);        }else{            res.sendFile(path.join(__dirname,'../public/Admin.html'));        }    });});//==========================Passport usage (For Members)=============================router.get('/message', function (req, res) {    res.send("Username has Already been taken or You are currently not an User... :D");});router.post('/member',middleregister,function(req,res){    Member.findOne({username: req.body.username}, function (err, data) {        console.log(data);        if(data!==null){            res.redirect('/message');        }else{            let obj={                username:req.body.username,                password:req.body.password            };            if(!req.user.super){              obj.admin=req.user.username;            }            let newUser=new Member(obj);            newUser.save(obj);            res.sendFile(path.join(__dirname,'../public/MemberLogin.html'));        }    });});passport.use('Member',new strategy(function(username,password, done ) {    findMember(username,function(err,user){        if(err)            console.log(err);        if(!user)            return done(err,false);        compare(password,user.password,function(err,match){            if(err)                throw err;            if(match)                return done(null,user);            else                return done(null,false);        });    });}));router.post('/memberLogin',passport.authenticate('Member',{failureRedirect:'/message'}), function(req,res){    Member.findOne({username:req.body.username}, function (err, data) {        if(err){            console.log(err);        }else{            res.sendFile(path.join(__dirname,'../public/Member.html'));        }    });});//===============================RESTful Routes==================================router.get('/index', function (req, res) {    res.redirect('/');});router.get('/generic', function (req, res) {    res.sendFile(path.join(__dirname,'../public/generic.html'));});router.get('/AdminSignup',isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/AdminSignup.html'));});router.get('/MemberSignup',isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/MemberSignup.html'));});router.get('/Member',memberIn,isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/Member.html'));});router.get('/admissionPage',superIn,isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/admissionPage.html'));});router.get('/admissionPage_admin',adminIn,isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/admissionPage_admin.html'));});router.get('/admissionPage_user',memberIn,isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/admissionPage_user.html'));});router.get('/MemberLogin', function (req, res) {    res.sendFile(path.join(__dirname,'../public/MemberLogin.html'));});router.get('/AdminLogin', function (req, res) {    res.sendFile(path.join(__dirname,'../public/AdminLogin.html'));});router.get('/SuperAdminLogin', function (req, res) {    res.sendFile(path.join(__dirname,'../public/SuperAdminLogin.html'));});router.get('/SuperAdmin', superIn,isLoggedIn, function (req, res) {    res.sendFile(path.join(__dirname,'../public/SuperAdmin.html'));});router.get('/Admin',adminIn, isLoggedIn, function (req, res) {        res.sendFile(path.join(__dirname,'../public/Admin.html'));});router.get('/SuperAdminSignup', function (req, res) {    res.sendFile(path.join(__dirname,'../public/SuperAdminSignup.html'));});router.get('/moreInfo/:id', function (req, res) {    admission.findOne({_id: req.params.id}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('moreInfo.ejs', {data: data});        }    });});router.post("/update/:id", function(req, res){    admission.findByIdAndUpdate(req.params.id, {$set: req.body}, function(err, data){        if(err){            console.log(err);            res.redirect('/');        } else {            res.redirect("/moreInfo/" + data._id);        }    });});router.get('/edit/:id', function (req, res) {    admission.findOne({_id: req.params.id}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('editMember.ejs', {data: data});        }    });});router.get('/manageAdmins_su', function (req, res) {    Admin.find({}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('manageAdmins_su', {data: data});        }    });});router.get('/manageMember_su', function (req, res) {    Member.find({}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('manageMember_su', {data: data});        }    });});router.get('/manageMember', function (req, res) {    Member.find({}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('manageMember', {data: data});        }    });});router.get('/moreInfoAdmin/:id', function (req, res) {    Admin.findOne({_id: req.params.id}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('moreInfoAdmin.ejs', {data: data});        }    });});router.get('/moreInfoUser/:id', function (req, res) {    Member.findOne({_id: req.params.id}, function (err, data) {        if(err){            console.log(err);        }else{            res.render('moreInfoUser.ejs', {data: data});        }    });});router.get('/deleteAdmin/:id', function (req, res) {   Admin.remove({_id: req.params.id}, function (err, data) {       if(err){           res.redirect('/');       }else{           res.redirect('/manageAdmins_su');       }   })});router.get('/deleteMember/:id', function (req, res) {    Member.remove({_id: req.params.id}, function (err, data) {        if(err){            res.redirect('/');        }else{            res.redirect('/manageMember_su');        }    })});//============================function()0====Image Uploader=================================================const storage = multer.diskStorage({    destination: './public/uploads/',    filename: function(req, file, cb){        cb(null,file.fieldname + '-' + Date.now() + path.extname(file.originalname));    }});const upload = multer({    storage: storage}).single('myImage');router.post('/upload', (req, res) => {    upload(req, res, (err) => {        if(err){            res.render('/admissionPage');        } else {            if(req.file === undefined){                res.render('/admissionPage');            } else {                res.render('admissionPage', {                    file: `uploads/${req.file.filename}`                });            }        }    });});router.post('/upload_user', (req, res) => {    upload(req, res, (err) => {        if(err){            res.render('/admissionPage_user');        } else {            if(req.file === undefined){                res.render('/admissionPage_user');            } else {                res.render('admissionPage_user', {                    file: `uploads/${req.file.filename}`                });            }        }    });});router.post('/upload_admin', (req, res) => {    upload(req, res, (err) => {        if(err){            res.render('/admissionPage_admin');        } else {            if(req.file === undefined){                res.render('/admissionPage_admin');            } else {                res.render('admissionPage_admin', {                    file: `uploads/${req.file.filename}`                });            }        }    });});//============================Graph Making(Stats)===========================router.get('/stats', function (req, res) {    admission.find({}, function (err, data) {        if(err){            console.log(err);            res.redirect('/');        }else{            res.render('graph.ejs', {data: data});        }    })});//==============================================================================router.post('/filter', function(req,res){    let body = req.body;    let filter ={};    if(body.from&&body.to) {        let from = Number(body.from);        let to = Number(body.to);        filter.age = {            from: from,            to: to        };    }    else{        filter.age = {            from: 0,            to: 100        };    }    if(body.enrollment){        filter.enrollment= {            enrollment:body.enrollment        }    }    if(body.aadhar){        filter.enrollment= {            enrollment:body.aadhar        }    }    if(body.gender){        filter.gender= {            gender:body.gender        }    }    admission.find({},function(err,data){        search (filter,data, function(data1){            res.render('alladmission',{data:data1});        });    });});router.get('/statistics', function (req, res) {    let yes=0;    let no=0;    admission.find({}, function (err, data) {        if(err){            res.redirect('/');        }else{            data.forEach(function (val) {                if(val.aadhar){                    yes++;                }else{                    no++;                }            });            res.render('gender',{yes: yes, no: no});        }    });});router.get('/stat', function (req, res) {    let d=0;    let n=0;    let g=0;    admission.find({}, function (err, data) {        if(err){            res.redirect('/');        }else{            console.log(data);            data.forEach(function (val) {                if(val.enrollment==="Going to school"){                    g++;                }else if(val.enrollment==="Dropouts"){                    d++;                }else{                    n++;                }            });            res.render('enrollment',{d:d, g:g, n:n});        }    });});//==========================================================================module.exports = router;